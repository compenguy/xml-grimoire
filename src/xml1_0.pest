// # W3C Extensible Markup Language (XML) 1.0 (Fifth Edition)
// ## Reference: https://www.w3.org/TR/2008/REC-xml-20081126/
// ### Last updated: 2013-02-07
// ## Latest version: https://www.w3.org/TR/xml/
// For a description of how to interpret the XML specification's
// particular flavor of EBNF, see
// https://www.w3.org/TR/REC-xml/#sec-notation

// # Document
// [1](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-document)
// `document   ::=   prolog element Misc*`

// NOTE: EOI is a pest-specific production matching the end-of-input
// This ensures that trailing data that doesn't match Misc* gets
// treated as an error rather than being ignored.
document = { SOI ~ prolog ~ element ~ Misc* ~ EOI }

// # Character Range
// [2](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-Char)
// `Char   ::=   #x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]`
// * any Unicode character, excluding the surrogate blocks, FFFE, and FFFF.

Char = _{ "\u{0009}" | "\u{000A}" | "\u{000D}" |
          '\u{0020}'..'\u{D7FF}' | '\u{E000}'..'\u{FFFD}' |
          '\u{10000}'..'\u{10FFFF}' }

// Document authors are encouraged to avoid "compatibility characters",
// as defined in section 2.3 of
// [Unicode](https://www.w3.org/TR/2008/REC-xml-20081126/#Unicode).
//
// The characters defined in the following ranges are also discouraged.
// They are either control characters or permanently undefined Unicode
// characters:
// ```
// [#x7F-#x84], [#x86-#x9F], [#xFDD0-#xFDEF],
// [#x1FFFE-#x1FFFF], [#x2FFFE-#x2FFFF], [#x3FFFE-#x3FFFF],
// [#x4FFFE-#x4FFFF], [#x5FFFE-#x5FFFF], [#x6FFFE-#x6FFFF],
// [#x7FFFE-#x7FFFF], [#x8FFFE-#x8FFFF], [#x9FFFE-#x9FFFF],
// [#xAFFFE-#xAFFFF], [#xBFFFE-#xBFFFF], [#xCFFFE-#xCFFFF],
// [#xDFFFE-#xDFFFF], [#xEFFFE-#xEFFFF], [#xFFFFE-#xFFFFF],
// [#x10FFFE-#x10FFFF]
// ```

DiscouragedChars = { '\u{007F}'..'\u{0084}' | '\u{0086}'..'\u{009F}' |
                     '\u{FDD0}'..'\u{FDEF}' | '\u{1FFFE}'..'\u{1FFFF}' |
                     '\u{2FFFE}'..'\u{2FFFF}' | '\u{3FFFE}'..'\u{3FFFF}' |
                     '\u{4FFFE}'..'\u{4FFFF}' | '\u{5FFFE}'..'\u{5FFFF}' |
                     '\u{6FFFE}'..'\u{6FFFF}' | '\u{7FFFE}'..'\u{7FFFF}' |
                     '\u{8FFFE}'..'\u{8FFFF}' | '\u{9FFFE}'..'\u{9FFFF}' |
                     '\u{AFFFE}'..'\u{AFFFF}' | '\u{BFFFE}'..'\u{BFFFF}' |
                     '\u{CFFFE}'..'\u{CFFFF}' | '\u{DFFFE}'..'\u{DFFFF}' |
                     '\u{EFFFE}'..'\u{EFFFF}' | '\u{FFFFE}'..'\u{FFFFF}' |
                     '\u{10FFFE}'..'\u{10FFFF}' }

// # White Space
// [3](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-S)
// `S   ::=   (#x20 | #x9 | #xD | #xA)+`

S = _{ "\u{0020}" | "\u{0009}" | "\u{000D}" | "\u{000A}" }

// # Names and Tokens
// [4](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-NameStartChar)
// `NameStartChar   ::=   ":" | [A-Z] | "_" | [a-z] | [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x2FF] | [#x370-#x37D] | [#x37F-#x1FFF] | [#x200C-#x200D] | [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]`

NameStartChar = _{ ":" | 'A'..'Z' | "_" | 'a'..'z' | '\u{00C0}'..'\u{00D6}' |
                  '\u{00D8}'..'\u{00F6}' | '\u{00F8}'..'\u{02FF}' |
                  '\u{0370}'..'\u{037D}' | '\u{037F}'..'\u{1FFF}' |
                  '\u{200C}'..'\u{200D}' | '\u{2070}'..'\u{218F}' |
                  '\u{2C00}'..'\u{2FEF}' | '\u{3001}'..'\u{D7FF}' |
                  '\u{F900}'..'\u{FDCF}' | '\u{FDF0}'..'\u{FFFD}' |
                  '\u{10000}'..'\u{EFFFF}' }

// [4a](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-NameChar)
// `NameChar   ::=   NameStartChar | "-" | "." | [0-9] | #xB7 | [#x0300-#x036F] | [#x203F-#x2040]`

NameChar = _{ NameStartChar | "-" | "." | '0'..'9' | "\u{00B7}" |
              '\u{0300}'..'\u{036F}' | '\u{203F}'..'\u{2040}' }

// [5](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-Name)
// `Name   ::=   NameStartChar (NameChar)*`

Name = { NameStartChar ~ NameChar* }

// [6](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-Names)
// `Names   ::=   Name (#x20 Name)*`

Names = _{ Name ~ ("\u{0020}" ~ Name)* }

// [7](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-Nmtoken)
// `Nmtoken   ::=   (NameChar)+`

Nmtoken = { NameChar+ }

// [8](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-Nmtokens)
// `Nmtokens   ::=   Nmtoken (#x20 Nmtoken)*`

Nmtokens = _{ Nmtoken ~ ("\u{0020}" ~ Nmtoken)* }

// # Literals
// [9](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-EntityValue)
// `EntityValue   ::=   '"' ([^%&"] | PEReference | Reference)* '"' |  "'" ([^%&'] | PEReference | Reference)* "'"`

EntityValue = { ("\"" ~ ( (!("%" | "&" | "\"") ~ Char) | PEReference | Reference)* ~ "\"") |
                ("'" ~ ( (!("%" | "&" | "'") ~ Char) | PEReference | Reference)* ~ "'") }

// [10](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-AttValue)
// `AttValue   ::=   '"' ([^<&"] | Reference)* '"' |  "'" ([^<&'] | Reference)* "'"`

AttValue = { ("\"" ~ ( (!("<" | "&" | "\"") ~ Char) | Reference)* ~ "\"") |
             ("'" ~ ( (!("<" | "&" | "'") ~ Char) | Reference)* ~ "'") }

// [11](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-SystemLiteral)
// `SystemLiteral   ::=   ('"' [^"]* '"') | ("'" [^']* "'")`

SystemLiteral = { ("\"" ~ (!"\"" ~ Char)* ~ "\"") |
                  ("'" ~ (!"'" ~ Char)* ~ "'") }

// [12](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-PubidLiteral)
// `PubidLiteral   ::=   '"' PubidChar* '"' | "'" (PubidChar - "'")* "'"`

PubidLiteral = { ("\"" ~ PubidChar* ~ "\"") |
                 ("'" ~ PubidChar* ~ "'") }

// [13](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-PubidChar)
// `PubidChar   ::=   #x20 | #xD | #xA | [a-zA-Z0-9] | [-'()+,./:=?;!*#@$_%]`

PubidChar = _{ "\u{0020}" | "\u{000D}" | "\u{000A}" |
               'a'..'z' | 'A'..'Z' | '0'..'9' | "-" |
               "'" | "(" | ")" | "+" | "," | "." |
               "/" | ":" | "=" | "?" | ";" | "!" | "*" |
               "#" | "@" | "$" | "_" | "%" }

// # Character Data
// [14](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-CharData)
// `CharData   ::=   [^<&]* - ([^<&]* ']]>' [^<&]*)`

// non-standard helper production to express [^<&]
_non_tag_entity_start_char = _{ !("<" | "&") ~ Char }
// Pest expresses A - B syntax instead as !B ~ A
CharData = { !((!CDEnd ~ _non_tag_entity_start_char)* ~ CDEnd) ~ _non_tag_entity_start_char* }

// # Comments
// [15](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-Comment)
// `Comment   ::=   '<!--' ((Char - '-') | ('-' (Char - '-')))* '-->'`

// Pest expresses A - B syntax instead as !B ~ A
Comment = { "<!--" ~ ( (!"-" ~ Char) | ("-" ~ (!"-" ~ Char)))* ~ "-->" }

// # Processing Instructions
// [16](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-PI)
// `PI   ::=   '<?' PITarget (S (Char* - (Char* '?>' Char*)))? '?>'`

// non-standard helper production to express (Char* - (Char* '?>' Char*))
_pi_data = _{ !(Char* ~ "?>" ~ Char*) ~ Char* }
// Pest expresses A - B syntax instead as !B ~ A
PI = { "<?" ~ PITarget ~ (S ~ (_pi_data))? ~ "?>" }

// [17](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-PITarget)
// `PITarget   ::=   Name - (('X' | 'x') ('M' | 'm') ('L' | 'l'))`

// Pest expresses A - B syntax instead as !B ~ A
PITarget = { !( ("X" | "x") ~ ("M" | "m") ~ ("L" | "l") ) ~ Name }

// CDATA Sections
// [18](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-CDSect)
// `CDSect   ::=   CDStart CData CDEnd`

CDSect = { CDStart ~ CData ~ CDEnd }

// [19](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-CDStart)
// `CDStart   ::=   '<![CDATA['`

CDStart = { "<![CDATA[" }

// [20](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-CData)
// `CData   ::=   (Char* - (Char* ']]>' Char*))`

// NOTE: Custom rewrite of EBNF production
CData = { (!CDEnd ~ Char)* }

// [21](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-CDEnd)
// `CDEnd   ::=   ']]>'`

CDEnd = { "]]>" }

// # Prolog
// [22](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-prolog)
// `prolog   ::=   XMLDecl? Misc* (doctypedecl Misc*)?`

prolog = { XMLDecl? ~ Misc* ~ (doctypedecl ~ Misc*)? }

// [23](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-XMLDecl)
// `XMLDecl   ::=   '<?xml' VersionInfo EncodingDecl? SDDecl? S? '?>'`

XMLDecl = { "<?xml" ~ VersionInfo ~ EncodingDecl? ~ SDDecl? ~ S? ~ "?>" }

// [24](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-VersionInfo)
// `VersionInfo   ::=   S 'version' Eq ("'" VersionNum "'" | '"' VersionNum '"')`

VersionInfo = { S ~ "version" ~ Eq ~ (("'" ~ VersionNum ~ "'") | ("\"" ~ VersionNum ~ "\"")) }

// [25](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-Eq)
// `Eq   ::=   S? '=' S?`

Eq = { S? ~ "=" ~ S? }

// [26](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-VersionNum)
// `VersionNum   ::=   '1.' [0-9]+`

VersionNum = { "1." ~ ('0'..'9')+ }

// [27](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-Misc)
// `Misc   ::=   Comment | PI | S`

Misc = { Comment | PI | S }

// # Document Type Definition
// [28](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-doctypedecl)
// `doctypedecl   ::=   '<!DOCTYPE' S Name (S ExternalID)? S? ('[' intSubset ']' S?)? '>'`

doctypedecl = { "<!DOCTYPE" ~ S ~ Name ~ (S ~ ExternalID)? ~ S? ~ ("[" ~ intSubset ~ "]" ~ S?)? ~ ">" }

// [28a](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-declsep)
// `DeclSep   ::=   PEReference | S`

DeclSep = { PEReference | S }

// [28b](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-intSubset)
// `intSubset   ::=   (markupdecl | DeclSep)*`

intSubset = { (markupdecl | DeclSep)* }

// [29](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-markupdecl)
// `markupdecl   ::=   elementdecl | AttlistDecl | EntityDecl | NotationDecl | PI | Comment`

markupdecl = { elementdecl | AttlistDecl | EntityDecl | NotationDecl | PI | Comment }

// # External Subset
// [30](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-extSubset)
// `extSubset   ::=   TextDecl? extSubsetDecl`

extSubset = { TextDecl? ~ extSubsetDecl }

// [31](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-extSubsetDecl)
// `extSubsetDecl   ::=   ( markupdecl | conditionalSect | DeclSep)*`

extSubsetDecl = { ( markupdecl | conditionalSect | DeclSep )* }

// # Standalone Document Declaration
// [32](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-SDDecl)
// `SDDecl   ::=   S 'standalone' Eq (("'" ('yes' | 'no') "'") | ('"' ('yes' | 'no') '"'))`

SDDecl = { S ~ "standalone" ~ Eq ~ (("'" ~ ("yes" | "no") ~ "'") | ("\"" ~ ("yes" | "no") ~ "\"")) }

// # Element
// [39](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-element)
// `element   ::=   EmptyElemTag | STag content ETag`

element = { EmptyElemTag | (STag ~ content ~ ETag) }

// # Start-tag
// [40](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-STag)
// `STag   ::=   '<' Name (S Attribute)* S? '>'`

// NOTE: Deviation from documented schema: (S Attribute) -> (S+ Attribute)
STag = { "<" ~ Name ~ (S+ ~ Attribute)* ~ S? ~ ">" }

// [41](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-Attribute)
// `Attribute   ::=   Name Eq AttValue`

Attribute = { Name ~ Eq ~ AttValue }

// # End-tag
// [42](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-ETag)
// `ETag   ::=   '</' Name S? '>'`

ETag = { "</" ~ Name ~ S? ~ ">" }

// # Content of Elements
// [43](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-content)
// `content   ::=   CharData? ((element | Reference | CDSect | PI | Comment) CharData?)*`

content = { CharData? ~ ((element | Reference | CDSect | PI | Comment) ~ CharData?)* }

// # Tags for Empty Elements
// [44](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-EmptyElemTag)
// `EmptyElemTag   ::=   '<' Name (S Attribute)* S? '/>'`

// NOTE: Deviation from documented schema: (S Attribute) -> (S+ Attribute)
EmptyElemTag = { "<" ~ Name ~ (S+ ~ Attribute)* ~ S? ~ "/>" }

// # Element Type Declaration
// [45](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-elementdecl)
// `elementdecl   ::=   '<!ELEMENT' S Name S contentspec S? '>'`

// NOTE: Deviation from documented schema: S Name S -> S+ Name S+
elementdecl = { "<!ELEMENT" ~ S+ ~ Name ~ S+ ~ contentspec ~ S? ~ ">" }

// [46](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-contentspec)
// `contentspec   ::=   'EMPTY' | 'ANY' | Mixed | children`

contentspec = { "EMPTY" | "ANY" | Mixed | children }

// # Element-content Models
// [47](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-children)
// `children   ::=   (choice | seq) ('?' | '*' | '+')?`

children = { (choice | seq) ~ ("?" | "*" | "+")? }

// [48](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-cp)
// `cp   ::=   (Name | choice | seq) ('?' | '*' | '+')?`

cp = { (Name | choice | seq) ~ ("?" | "*" | "+")? }

// [49](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-choice)
// `choice   ::=   '(' S? cp ( S? '|' S? cp )+ S? ')'`

choice = { "(" ~ S? ~ cp ~ ( S? ~ "|" ~ S? ~ cp)+ ~ S? ~ ")" }

// [50](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-seq)
// `seq   ::=   '(' S? cp ( S? ',' S? cp )* S? ')'`

seq = { "(" ~ S? ~ cp ~ ( S? ~ "," ~ S? ~ cp )* ~ S? ~ ")" }

// # Mixed-content Declaration
// [51](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-Mixed)
// `Mixed   ::=   '(' S? '#PCDATA' (S? '|' S? Name)* S? ')*' | '(' S? '#PCDATA' S? ')'`

Mixed = { ("(" ~ S? ~ "#PCDATA" ~ (S? ~ "|" ~ S? ~ Name)* ~ S? ~ ")*") | ("(" ~ S? ~ "#PCDATA" ~ S? ~ ")") }

//# Attribute-list Declaration
// [52](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-AttlistDecl)
// `AttlistDecl   ::=   '<!ATTLIST' S Name AttDef* S? '>'`

AttlistDecl = { "<!ATTLIST" ~ S ~ Name ~ AttDef* ~ S? ~ ">" }

// [53](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-AttDef)
// `AttDef   ::=   S Name S AttType S DefaultDecl`

AttDef = { S ~ Name ~ S ~ AttType ~ S ~ DefaultDecl }

// # Attribute Types
// [54](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-AttType)
// `AttType   ::=   StringType | TokenizedType | EnumeratedType`

AttType = { StringType | TokenizedType | EnumeratedType }

// [55](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-StringType)
// `StringType   ::=   'CDATA'`

StringType = { "CDATA" }

// [56](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-TokenizedType)
// `TokenizedType   ::=   'ID' | 'IDREF' | 'IDREFS' |
//                       'ENTITY' | 'ENTITIES' |
//                       'NMTOKEN' | 'NMTOKENS'`

TokenizedType = { "ID" | "IDREF" | "IDREFS" | "ENTITY" | "ENTITIES" |
                  "NMTOKEN" | "NMTOKENS" }

// # Enumerated Attribute Types
// [57](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-EnumeratedType)
// `EnumeratedType   ::=   NotationType | Enumeration`

EnumeratedType = { NotationType | Enumeration }

// [58](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-NotationType)
// `NotationType   ::=   'NOTATION' S '(' S? Name (S? '|' S? Name)* S? ')'`

NotationType = { "NOTATION" ~ S ~ "(" ~ S? ~ Name ~ (S? ~ "|" ~ S? ~ Name)* ~ S? ~ ")" }

// [59](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-Enumeration)
// `Enumeration   ::=   '(' S? Nmtoken (S? '|' S? Nmtoken)* S? ')'`

Enumeration = { "(" ~ S? ~ Nmtoken ~ (S? ~ "|" ~ S? ~ Nmtoken)* ~ S? ~ ")" }

// # Attribute Defaults
// [60](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-DefaultDecl)
// `DefaultDecl   ::=   '#REQUIRED' | '#IMPLIED' | (('#FIXED' S)? AttValue)`

DefaultDecl = { "#REQUIRED" | "#IMPLIED" | (("#FIXED" ~ S)? ~ AttValue) }

// # Conditional Section
// [61](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-conditionalSect)
// `conditionalSect   ::=   includeSect | ignoreSect`

conditionalSect = { includeSect | ignoreSect }

// [62](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-includeSectc)
// `includeSect   ::=   '<![' S? 'INCLUDE' S? '[' extSubsetDecl ']]>'`

includeSect = { "<![" ~ S? ~ "INCLUDE" ~ S? ~ "[" ~ extSubsetDecl ~ "]]>" }

// [63](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-ignoreSect)
// `ignoreSect   ::=   '<![' S? 'IGNORE' S? '[' ignoreSectContents* ']]>'`

ignoreSect = { "<![" ~ S? ~ "IGNORE" ~ S? ~ "[" ~ ignoreSectContents* ~ "]]>" }

// [64](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-ignoreSectContents)
// `ignoreSectContents   ::=   Ignore ('<![' ignoreSectContents ']]>' Ignore)*`

ignoreSectContents = { Ignore ~ ("<![" ~ ignoreSectContents ~ "]]>" ~ Ignore)* }

// [65](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-Ignore)
// `Ignore   ::=   Char* - (Char* ('<![' | ']]>') Char*)`

// Pest expresses A - B syntax instead as !B ~ A
Ignore = { !(Char* ~ ("<![" | "]]>") ~ Char*) ~ Char* }

// # Character Reference
// [66](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-CharRef)
// `CharRef   ::=   '&#' [0-9]+ ';' | '&#x' [0-9a-fA-F]+ ';'`

CharRef = { ("&#" ~ '0'..'9'+ ~ ";") | ("&#x" ~ ('0'..'9' | 'a'..'f' | 'A'..'F')+ ~ ";") }

// # Entity Reference
// [67](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-Reference)
// `Reference   ::=   EntityRef | CharRef`

Reference = { EntityRef | CharRef }

// [68](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-EntityRef)
// `EntityRef   ::=   '&' Name ';'`

EntityRef = { "&" ~ Name ~ ";" }

// [69](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-PEReference)
// `PEReference   ::=   '%' Name ';'`

PEReference = { "%" ~ Name ~ ";" }

// # Entity Declaration
// [70](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-EntityDecl)
// `EntityDecl   ::=   GEDecl | PEDecl`

EntityDecl = { GEDecl | PEDecl }

// [71](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-GEDecl)
// `GEDecl   ::=   '<!ENTITY' S Name S EntityDef S? '>'`

GEDecl = { "<!ENTITY" ~ S ~ Name ~ S ~ EntityDef ~ S? ~ ">" }

// [72](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-PEDecl)
// `PEDecl   ::=   '<!ENTITY' S '%' S Name S PEDef S? '>'`

PEDecl = { "<!ENTITY" ~ S ~ "%" ~ S ~ Name ~ S ~ PEDef ~ S? ~ ">" }

// [73](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-EntityDef)
// `EntityDef   ::=   EntityValue | (ExternalID NDataDecl?)`

EntityDef = { EntityValue | (ExternalID ~ NDataDecl?) }

// [74](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-PEDef)
// `PEDef   ::=   EntityValue | ExternalID`

PEDef = { EntityValue | ExternalID }

// # External Entity Declaration
// [75](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-ExternalID)
// `ExternalID   ::=   'SYSTEM' S SystemLiteral | 'PUBLIC' S PubidLiteral S SystemLiteral`

ExternalID = { ("SYSTEM" ~ S ~ SystemLiteral) | ("PUBLIC" ~ S ~ PubidLiteral ~ S ~ SystemLiteral) }

// [76](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-NDataDecl)
// `NDataDecl   ::=   S 'NDATA' S Name`

NDataDecl = { S ~ "NDATA" ~ S ~ Name }

// # Text Declaration
// [77](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-TextDecl)
// `TextDecl   ::=   '<?xml' VersionInfo? EncodingDecl S? '?>'`

TextDecl = { "<?xml" ~ VersionInfo? ~ EncodingDecl ~ S? ~ "?>" }

// # Well-Formed External Parsed Entity
// [78](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-ExtParsedEnt)
// `extParsedEnt   ::=   TextDecl? content`

extParsedEnt = { TextDecl? ~ content }

// # Encoding Declaration
// [80](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-EncodingDecl)
// `EncodingDecl   ::=   S 'encoding' Eq ('"' EncName '"' | "'" EncName "'" )`

EncodingDecl = { S ~ "encoding" ~ Eq ~ ( ("\"" ~ EncName ~ "\"") | ("'" ~ EncName ~ "'" ) ) }

// [81](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-EncName)
// `EncName   ::=   [A-Za-z] ([A-Za-z0-9._] | '-')*`
// * Encoding name contains only Latin characters

EncName = { ('A'..'Z' | 'a'..'z') ~ ('A'..'Z' | 'a'..'z' | '0'..'9' | "." | "_" | "-")* }

// # Notation Declarations
// [82](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-NotationDecl)
// `NotationDecl   ::=   '<!NOTATION' S Name S (ExternalID | PublicID) S? '>'`

NotationDecl = { "<!NOTATION" ~ S ~ Name ~ S ~ (ExternalID | PublicID) ~ S? ~ ">" }

// [83](https://www.w3.org/TR/2008/REC-xml-20081126/#NT-PublicID)
// `PublicID   ::=   'PUBLIC' S PubidLiteral`

PublicID = { "PUBLIC" ~ S ~ PubidLiteral }
